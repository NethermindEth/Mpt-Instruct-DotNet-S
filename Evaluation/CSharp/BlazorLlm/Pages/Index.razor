@page "/"
@using BlazorLlm.Services
@inject CodeService _codeService
<style>
    .monaco-editor-container { /* for all editor instances */
        min-height: 40px; /* Adjust according to the height of a single line */
        max-height: 900px; /* Assuming each line is 20px in height, this would accommodate up to 100 lines */
        overflow-y: auto; /* Allow scrolling for content that exceeds max-height */
        overflow: auto;
        resize: vertical;
    }

    #code { /* for a specific editor instance */
        height: 300px;
    }

    #log { /* for a specific editor instance */
        height: 300px;
    }

    #progress { /* for a specific editor instance */
        width: 500px;
        height: 400px;
        background-color: transparent;
        font-size: 10px;
    }

    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(255, 255, 255, 0.7);
        z-index: 1000;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .loading-spinner {
        border: 4px solid rgba(255, 255, 255, 0.3);
        border-radius: 50%;
        border-top: 4px solid #000;
        width: 50px;
        height: 50px;
        animation: spin 1s linear infinite;
        position: absolute;   /* This will make it relative to the loading-overlay div */
        top: 50%;             /* Center it vertically */
        left: 50%;
        transform: translate(-50%, -50%);
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    .textarea-output {
        max-height: 33vh; /* set max height to 1/3 of the viewport height */
    }

    .custom-textarea {
        background-color: transparent;
        border: none;
        font-family: 'Consolas', monospace;
    }
</style>

<div class="container mt-5">
    <!-- Add a container for better alignment -->
    <!-- Task Editor (Markdown) -->
    <div class="card mb-3">
        <div class="card-header">
            Task-Instruction
        </div>
        <div class="card-body">
            <div class="border p-2 mb-2">
                <StandaloneCodeEditor Id="task" @ref="taskEditorReference" ConstructionOptions="TaskEditorConstructionOptions" OnKeyUp="OnTaskChanged"></StandaloneCodeEditor>
            </div>
            <button class="btn btn-success mt-2" @onclick="GenerateCode" disabled="@isProcessing">Generate Code</button> <!-- Green button -->
        </div>
    </div>

    <!-- Code Editor -->
    <div class="card mb-3">
        <div class="card-header">
            Code (C#)
        </div>
        <div class="card-body">
            <div class="border p-2 mb-2">
                <StandaloneCodeEditor Id="code" @ref="codeEditorReference" ConstructionOptions="CodeEditorConstructionOptions" OnKeyUp="OnCodeChanged"></StandaloneCodeEditor>
            </div>
            <button class="btn btn-warning mt-2" @onclick="RunCode" disabled="@isProcessing">Run Code</button> <!-- Yellow button -->
            <button class="btn btn-info mt-2" @onclick="ExplainCode" disabled="@isProcessing">Explain Code</button> <!-- Light blue button -->

        </div>
    </div>

    <!-- Log Viewer -->
    <div class="card mb-3">
        <div class="card-header">
            Output
        </div>
        <div class="card-body">
            <div class="border p-2 mb-2">
                <StandaloneCodeEditor Id="log" @ref="logViewerReference" ConstructionOptions="LogEditorConstructionOptions" OnKeyUp="OnLogChanged"></StandaloneCodeEditor>
            </div>
        </div>
    </div>

    @if (isProcessing)
    {
        <div class="text-center mt-3">
            <p>Processing...</p>
        </div>
        <div class="loading-overlay">
            
        </div>
        <div class="loading-overlay">
            <div class="border p-2 mb-2 w-33 mx-auto custom-textarea">
                <StandaloneCodeEditor Id="progress" @ref="progressBarEditorReference" ConstructionOptions="ProgreeBarEditorConstructionOptions"></StandaloneCodeEditor>
            </div>
            <div class="loading-spinner"></div>

        </div>

    }

</div>

@code {
    StandaloneCodeEditor progressBarEditorReference;
    StandaloneCodeEditor codeEditorReference;
    StandaloneCodeEditor logViewerReference;
    StandaloneCodeEditor taskEditorReference;
    private string TaskInput { get; set; } = "How would you retrieve and analyse the fee history for the last 100 blocks and determine the average gas price?";
    private string CodeInput { get; set; }
    private string LogOutput { get; set; }
    private bool isProcessing = false;

    public string OutputProgressText
    {
        get { return _codeService.OutputText; }
        set { }
    }

    protected override void OnInitialized()
    {
        _codeService.OnOutputChanged += RefreshUI;
    }

    private async void RefreshUI()
    {
        InvokeAsync(() =>
        {
            if (progressBarEditorReference != null)
            {
                progressBarEditorReference.SetValue(OutputProgressText);
            }
            StateHasChanged();
        }).Wait();
    }

    public void Dispose()
    {
        _codeService.OnOutputChanged -= RefreshUI;
    }

    private StandaloneEditorConstructionOptions ProgreeBarEditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
            {
                AutomaticLayout = true,
                Language = "csharp",
                Value = OutputProgressText,
                WordWrap = "on"
            };
    }

    private StandaloneEditorConstructionOptions CodeEditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = "csharp",
            Value = "\n",
            WordWrap = "on"
        };
    }
    private StandaloneEditorConstructionOptions TaskEditorConstructionOptions(StandaloneCodeEditor arg)
    {
        return new StandaloneEditorConstructionOptions
            {
                AutomaticLayout = true,
                Language = "markdown",
                Value = "How would you retrieve and analyse the fee history for the last 100 blocks and determine the average gas price?",
                WordWrap = "on"
            };
    }

    private StandaloneEditorConstructionOptions LogEditorConstructionOptions(StandaloneCodeEditor arg)
    {
        return new StandaloneEditorConstructionOptions
            {
                AutomaticLayout = true,
                Language = "markdown",
                Value = "\n",
                WordWrap = "on"
            };
    }
    private async Task HandleCodeRequest(string action)
    {
        isProcessing = true;
        await NotifyStateChange();
    
        var response = await _codeService.HandleRequestAsync(TaskInput, CodeInput, action);
        UpdateResponse(response);

        isProcessing = false;
        await NotifyStateChange();
    }

    private async Task NotifyStateChange()
    {
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private async Task GenerateCode()
    {
        await HandleCodeRequest("generate");
    }

    private async Task RunCode()
    {
        await HandleCodeRequest("run");
    }

    private async Task ExplainCode()
    {
        await HandleCodeRequest("explain");
    }

    private void UpdateResponse(DataModel data)
    {
        TaskInput = data.Task;
        CodeInput = data.Code;
        LogOutput = data.Log;
        taskEditorReference.SetValue(TaskInput);
        codeEditorReference.SetValue(CodeInput);
        logViewerReference.SetValue(LogOutput);
    }

    private async void OnCodeChanged(KeyboardEvent keyboardEvent)
    {
        CodeInput = await codeEditorReference.GetValue();
    }

    private async void OnTaskChanged(KeyboardEvent arg)
    {
        TaskInput = await taskEditorReference.GetValue();
    }

    private async void OnLogChanged(KeyboardEvent arg)
    {
        LogOutput = await logViewerReference.GetValue();
    }
}
