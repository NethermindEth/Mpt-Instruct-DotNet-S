//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace MptLibrary {

public class mpt_model : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal mpt_model(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(mpt_model obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(mpt_model obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~mpt_model() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          libmpt_libraryPINVOKE.delete_mpt_model(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public mpt_hparams hparams {
    set {
      libmpt_libraryPINVOKE.mpt_model_hparams_set(swigCPtr, mpt_hparams.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libmpt_libraryPINVOKE.mpt_model_hparams_get(swigCPtr);
      mpt_hparams ret = (cPtr == global::System.IntPtr.Zero) ? null : new mpt_hparams(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_ggml_tensor wte_weight {
    set {
      libmpt_libraryPINVOKE.mpt_model_wte_weight_set(swigCPtr, SWIGTYPE_p_ggml_tensor.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libmpt_libraryPINVOKE.mpt_model_wte_weight_get(swigCPtr);
      SWIGTYPE_p_ggml_tensor ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ggml_tensor(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_ggml_tensor norm_f_weight {
    set {
      libmpt_libraryPINVOKE.mpt_model_norm_f_weight_set(swigCPtr, SWIGTYPE_p_ggml_tensor.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libmpt_libraryPINVOKE.mpt_model_norm_f_weight_get(swigCPtr);
      SWIGTYPE_p_ggml_tensor ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ggml_tensor(cPtr, false);
      return ret;
    } 
  }

  public Layers layers {
    set {
      libmpt_libraryPINVOKE.mpt_model_layers_set(swigCPtr, Layers.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libmpt_libraryPINVOKE.mpt_model_layers_get(swigCPtr);
      Layers ret = (cPtr == global::System.IntPtr.Zero) ? null : new Layers(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_ggml_tensor memory_k {
    set {
      libmpt_libraryPINVOKE.mpt_model_memory_k_set(swigCPtr, SWIGTYPE_p_ggml_tensor.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libmpt_libraryPINVOKE.mpt_model_memory_k_get(swigCPtr);
      SWIGTYPE_p_ggml_tensor ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ggml_tensor(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_ggml_tensor memory_v {
    set {
      libmpt_libraryPINVOKE.mpt_model_memory_v_set(swigCPtr, SWIGTYPE_p_ggml_tensor.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libmpt_libraryPINVOKE.mpt_model_memory_v_get(swigCPtr);
      SWIGTYPE_p_ggml_tensor ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ggml_tensor(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_ggml_context ctx {
    set {
      libmpt_libraryPINVOKE.mpt_model_ctx_set(swigCPtr, SWIGTYPE_p_ggml_context.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libmpt_libraryPINVOKE.mpt_model_ctx_get(swigCPtr);
      SWIGTYPE_p_ggml_context ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_ggml_context(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_std__mapT_std__string_ggml_tensor_p_std__lessT_std__string_t_t tensors {
    set {
      libmpt_libraryPINVOKE.mpt_model_tensors_set(swigCPtr, SWIGTYPE_p_std__mapT_std__string_ggml_tensor_p_std__lessT_std__string_t_t.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = libmpt_libraryPINVOKE.mpt_model_tensors_get(swigCPtr);
      SWIGTYPE_p_std__mapT_std__string_ggml_tensor_p_std__lessT_std__string_t_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__mapT_std__string_ggml_tensor_p_std__lessT_std__string_t_t(cPtr, false);
      return ret;
    } 
  }

  public mpt_model() : this(libmpt_libraryPINVOKE.new_mpt_model(), true) {
  }

}

}
