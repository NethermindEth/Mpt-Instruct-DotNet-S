//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace MptLibrary {

public class mpt_hparams : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal mpt_hparams(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(mpt_hparams obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(mpt_hparams obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~mpt_hparams() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          libmpt_libraryPINVOKE.delete_mpt_hparams(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public int d_model {
    set {
      libmpt_libraryPINVOKE.mpt_hparams_d_model_set(swigCPtr, value);
    } 
    get {
      int ret = libmpt_libraryPINVOKE.mpt_hparams_d_model_get(swigCPtr);
      return ret;
    } 
  }

  public int max_seq_len {
    set {
      libmpt_libraryPINVOKE.mpt_hparams_max_seq_len_set(swigCPtr, value);
    } 
    get {
      int ret = libmpt_libraryPINVOKE.mpt_hparams_max_seq_len_get(swigCPtr);
      return ret;
    } 
  }

  public int n_heads {
    set {
      libmpt_libraryPINVOKE.mpt_hparams_n_heads_set(swigCPtr, value);
    } 
    get {
      int ret = libmpt_libraryPINVOKE.mpt_hparams_n_heads_get(swigCPtr);
      return ret;
    } 
  }

  public int n_layers {
    set {
      libmpt_libraryPINVOKE.mpt_hparams_n_layers_set(swigCPtr, value);
    } 
    get {
      int ret = libmpt_libraryPINVOKE.mpt_hparams_n_layers_get(swigCPtr);
      return ret;
    } 
  }

  public int n_vocab {
    set {
      libmpt_libraryPINVOKE.mpt_hparams_n_vocab_set(swigCPtr, value);
    } 
    get {
      int ret = libmpt_libraryPINVOKE.mpt_hparams_n_vocab_get(swigCPtr);
      return ret;
    } 
  }

  public float alibi_bias_max {
    set {
      libmpt_libraryPINVOKE.mpt_hparams_alibi_bias_max_set(swigCPtr, value);
    } 
    get {
      float ret = libmpt_libraryPINVOKE.mpt_hparams_alibi_bias_max_get(swigCPtr);
      return ret;
    } 
  }

  public float clip_qkv {
    set {
      libmpt_libraryPINVOKE.mpt_hparams_clip_qkv_set(swigCPtr, value);
    } 
    get {
      float ret = libmpt_libraryPINVOKE.mpt_hparams_clip_qkv_get(swigCPtr);
      return ret;
    } 
  }

  public int ftype {
    set {
      libmpt_libraryPINVOKE.mpt_hparams_ftype_set(swigCPtr, value);
    } 
    get {
      int ret = libmpt_libraryPINVOKE.mpt_hparams_ftype_get(swigCPtr);
      return ret;
    } 
  }

  public int n_ctx {
    set {
      libmpt_libraryPINVOKE.mpt_hparams_n_ctx_set(swigCPtr, value);
    } 
    get {
      int ret = libmpt_libraryPINVOKE.mpt_hparams_n_ctx_get(swigCPtr);
      return ret;
    } 
  }

  public mpt_hparams() : this(libmpt_libraryPINVOKE.new_mpt_hparams(), true) {
  }

}

}
