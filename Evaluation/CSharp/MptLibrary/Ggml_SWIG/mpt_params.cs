//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (https://www.swig.org).
// Version 4.1.1
//
// Do not make changes to this file unless you know what you are doing - modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace MptLibrary {

public class mpt_params : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal mpt_params(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(mpt_params obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  internal static global::System.Runtime.InteropServices.HandleRef swigRelease(mpt_params obj) {
    if (obj != null) {
      if (!obj.swigCMemOwn)
        throw new global::System.ApplicationException("Cannot release ownership as memory is not owned");
      global::System.Runtime.InteropServices.HandleRef ptr = obj.swigCPtr;
      obj.swigCMemOwn = false;
      obj.Dispose();
      return ptr;
    } else {
      return new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
    }
  }

  ~mpt_params() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          libmpt_libraryPINVOKE.delete_mpt_params(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public int n_threads {
    set {
      libmpt_libraryPINVOKE.mpt_params_n_threads_set(swigCPtr, value);
    } 
    get {
      int ret = libmpt_libraryPINVOKE.mpt_params_n_threads_get(swigCPtr);
      return ret;
    } 
  }

  public int seed {
    set {
      libmpt_libraryPINVOKE.mpt_params_seed_set(swigCPtr, value);
    } 
    get {
      int ret = libmpt_libraryPINVOKE.mpt_params_seed_get(swigCPtr);
      return ret;
    } 
  }

  public int n_predict {
    set {
      libmpt_libraryPINVOKE.mpt_params_n_predict_set(swigCPtr, value);
    } 
    get {
      int ret = libmpt_libraryPINVOKE.mpt_params_n_predict_get(swigCPtr);
      return ret;
    } 
  }

  public int n_batch {
    set {
      libmpt_libraryPINVOKE.mpt_params_n_batch_set(swigCPtr, value);
    } 
    get {
      int ret = libmpt_libraryPINVOKE.mpt_params_n_batch_get(swigCPtr);
      return ret;
    } 
  }

  public int n_ctx {
    set {
      libmpt_libraryPINVOKE.mpt_params_n_ctx_set(swigCPtr, value);
    } 
    get {
      int ret = libmpt_libraryPINVOKE.mpt_params_n_ctx_get(swigCPtr);
      return ret;
    } 
  }

  public string model {
    set {
      libmpt_libraryPINVOKE.mpt_params_model_set(swigCPtr, value);
      if (libmpt_libraryPINVOKE.SWIGPendingException.Pending) throw libmpt_libraryPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = libmpt_libraryPINVOKE.mpt_params_model_get(swigCPtr);
      if (libmpt_libraryPINVOKE.SWIGPendingException.Pending) throw libmpt_libraryPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int top_k {
    set {
      libmpt_libraryPINVOKE.mpt_params_top_k_set(swigCPtr, value);
    } 
    get {
      int ret = libmpt_libraryPINVOKE.mpt_params_top_k_get(swigCPtr);
      return ret;
    } 
  }

  public float top_p {
    set {
      libmpt_libraryPINVOKE.mpt_params_top_p_set(swigCPtr, value);
    } 
    get {
      float ret = libmpt_libraryPINVOKE.mpt_params_top_p_get(swigCPtr);
      return ret;
    } 
  }

  public float temp {
    set {
      libmpt_libraryPINVOKE.mpt_params_temp_set(swigCPtr, value);
    } 
    get {
      float ret = libmpt_libraryPINVOKE.mpt_params_temp_get(swigCPtr);
      return ret;
    } 
  }

  public int repeat_last_n {
    set {
      libmpt_libraryPINVOKE.mpt_params_repeat_last_n_set(swigCPtr, value);
    } 
    get {
      int ret = libmpt_libraryPINVOKE.mpt_params_repeat_last_n_get(swigCPtr);
      return ret;
    } 
  }

  public float repeat_penalty {
    set {
      libmpt_libraryPINVOKE.mpt_params_repeat_penalty_set(swigCPtr, value);
    } 
    get {
      float ret = libmpt_libraryPINVOKE.mpt_params_repeat_penalty_get(swigCPtr);
      return ret;
    } 
  }

  public mpt_params() : this(libmpt_libraryPINVOKE.new_mpt_params(), true) {
  }

}

}
